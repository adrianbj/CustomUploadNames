<?php

/**
 * ProcessWire Custom Upload Names
 * by Adrian Jones
 *
 * Automatically rename file (and image) uploads according to a configurable format
 *
 * ProcessWire 2.x
 * Copyright (C) 2011 by Ryan Cramer
 * Licensed under GNU/GPL v2, see LICENSE.TXT
 *
 * http://www.processwire.com
 * http://www.ryancramer.com
 *
 */

class ProcessCustomUploadNames extends WireData implements Module, ConfigurableModule {

    /**
     * getModuleInfo is a module required by all modules to tell ProcessWire about them
     *
     * @return array
     *
     */
    public static function getModuleInfo() {
        return array(
            'title' => __('Custom Upload Names'),
            'version' => 42,
            'summary' => __('Automatically rename file (including image) uploads according to a configurable format'),
            'href' => 'http://modules.processwire.com/modules/process-custom-upload-names/',
            'singular' => true,
            'autoload' => true,
            'icon'     => 'edit'
            );
    }


   /**
     * Default configuration for module
     *
     */
    static public function getDefaultData() {
            return array(
                "tempDisabled" => "",
                "enabledFields" => "",
                "enabledPages" => "",
                "enabledTemplates" => "",
                "filenameFormat" => "",
                "fileExtensions" => "",
                "filenameLength" => "",
                "renameOnSave" => "",
                "ruleData" => ""
            );
    }

    /**
     * Populate the default config data
     *
     */
    public function __construct() {
       foreach(self::getDefaultData() as $key => $value) {
               $this->$key = $value;
       }
    }

    /**
     * Initialize the module
     */
    public function init() {

        // Check for AJAX request and process as appropriate
        if($this->config->ajax) {
            if ($this->input->get->addRule) {
                $this->addRule($this->input->get->addRule);
            }
        }

        //only load js file if we're on the module config settings for this module, rather than any other module
        if($this->className() == $this->input->get->name) $this->addHookAfter("ProcessModule::executeEdit", $this, "addScript");
    }


    public function ready() {
        if($this->ruleData!=''){
            $this->addHookAfter('Pagefile::install', $this, 'customRenameUploads');
            $this->addHookBefore('InputfieldFile::processInputAddFile', $this, 'customRenameUploads');
            $this->addHookAfter('Pages::saveReady', $this, 'customRenameUploads');
        }
    }


    public function customRenameUploads(HookEvent $event) {

        if($event->object->page->template == 'admin'){

            $interface = 'admin';

            $pageid = $this->input->get->id;
            $field = $event->object;

            if(isset($field) && $field != 'Pages'){
                $hook = 'upload';
                $field = $this->fields->get($field->name);
                if(!isset($field)) return;
                if(!$field->type instanceof FieldtypeFile) return;
                $fieldid = $field->id;
            }
            else{
                $hook = 'save';
            }

        }
        else{
            $interface = 'api';

            if($event->object->field){
                $hook = 'upload';
                $pageid = $event->object->page->id;
                $field = $event->object->field;
                if(!$field->type instanceof FieldtypeFile) return;
                $fieldid = $field->id;
            }
            else{
                $hook = 'save';
                $pageid = $event->arguments(0)->id;
            }

        }

        if(!$pageid) return; //avoids interactions with other modules

        $editedPage = wire('pages')->get($pageid);

        if($hook == 'upload') $files = array($event->arguments(0) => $fieldid); // add filename with respective fieldid to array

        if($hook == 'save' && is_object($editedPage->fields)){
            $files = array();
            foreach($editedPage->fields as $field){
                if($field->type instanceof FieldtypeFile){
                    foreach($editedPage->$field as $file){
                        $files[$file->name] = $field->id; // add filename with respective fieldid to array
                    }
                }
            }
        }

        if(empty($files)) return;
        foreach($files as $filename => $fieldid){

            //quick fix to prevent this module from renaming video thumbs from GetVideoThumbs module
            if (strpos($filename,'youtube') !== false || strpos($filename,'vimeo') !== false) return;

            //ruleData is a json string that we need to turn into an object
            $rules = json_decode($this->ruleData);

            //iterate through each of the rename rules
            foreach ($rules as $rule) {

                foreach(explode("|",$editedPage->parents) as $parent){
                    if(isset($rule->enabledPages)) $parentEnabled = in_array($parent, $rule->enabledPages) || in_array(1, $rule->enabledPages) ? true : false;
                }

                //all the conditions to not rename
                if($rule->tempDisabled == '1') continue;
                if(count($rule->enabledFields) != 0 && !in_array($fieldid, $rule->enabledFields)) continue; //if fields set and this is not a selected field
                if((count($rule->enabledTemplates) != 0 && !in_array($editedPage->template->id, $rule->enabledTemplates))) continue;
                if(isset($rule->enabledPages) && $rule->enabledPages[0] != '' && !in_array($editedPage->id, $rule->enabledPages) && !$parentEnabled) continue;
                if($rule->fileExtensions != '' && !in_array(pathinfo($filename, PATHINFO_EXTENSION), explode(",", trim(str_replace(', ',',',$rule->fileExtensions))))) continue; //if fileExtensions is set and the uploaded file does not match
                //for these next rules, break rather than continue because these are not specifity rules. No match is a positive result and so we don't want to test the next rule.
                if($rule->filenameFormat == '') break; // don't attempt to rename if the filename format field is empty
                if($rule->renameOnSave != '1' && $hook == 'save' && strpos(pathinfo($filename, PATHINFO_FILENAME),'.upload.tmp') === false) break; // .tmp might be set when the eval'd filename format is not available yet because field is empty.

                //build the new filename
                $fullFilename = $this->pages->get("$pageid")->filesManager()->path() . basename($filename);
                $newFilename = $this->createNewFilename($fullFilename, $rule->filenameFormat, $rule->filenameLength, $pageid, $fieldid);

                //rename the file
                if($interface == 'api' && $hook == 'upload'){
                    $pagefile = $event->object;
                    $pagefile->rename($newFilename); //rename the pagefile after it has been installed (uploaded and added to the file field)
                }
                if($interface == 'admin' && $hook == 'upload'){
                    if(file_exists($fullFilename)) rename($fullFilename, $newFilename);
                    $event->setArgument(0, $newFilename); // update the argument to the processInputAddFile function
                }
                if($hook == 'save'){ // saving from admin or api
                    // checks to prevent renaming on page save when there is no need because the filename won't change.
                    // this is mainly to prevent -n numbers from changing on each page save.
                    $parts = explode("-", pathinfo($fullFilename, PATHINFO_FILENAME));
                    $filenameNum = end($parts);
                    if(is_numeric($filenameNum)){
                        $filenameSansNum = str_replace('-'.$filenameNum, '', $fullFilename);
                    }
                    else{
                        $filenameSansNum = $fullFilename;
                    }

                    $parts = explode("-", pathinfo($newFilename, PATHINFO_FILENAME));
                    $newFilenameNum = end($parts);
                    if(is_numeric($newFilenameNum)){
                        $newFilenameSansNum = str_replace('-'.$newFilenameNum, '', $newFilename);
                    }
                    else{
                        $newFilenameSansNum = $newFilename;
                    }

                    if($filenameSansNum == $newFilenameSansNum) continue;

                    if($fullFilename != $newFilename){
                        $field = $this->fields->get($fieldid);
                        $file = $editedPage->$field->get("name=$filename");
                        $editedPage->$field->trackChange("filename");
                        if($field->type instanceof FieldtypeImage){
                            foreach($file->getVariations() as $imageVariation){
                                rename($imageVariation->filename, pathinfo($newFilename, PATHINFO_DIRNAME) . '/' . pathinfo($newFilename, PATHINFO_FILENAME) . str_replace(pathinfo($fullFilename, PATHINFO_FILENAME), '', pathinfo($imageVariation->filename, PATHINFO_FILENAME)) . '.' . pathinfo($fullFilename, PATHINFO_EXTENSION));
                            }
                            //iterate through all textarea fields on the page looking for embedded versions of images to rename
                            foreach($editedPage->fields->find("type=FieldtypeTextarea") as $textareafield){
                                $taf = $textareafield->name;
                                if(strpos($editedPage->$taf,'<img') === false) continue; //continue to next loop if there are no images are embedded in this field's html
                                $dom = new DOMDocument();
                                $dom->loadHTML($editedPage->$taf);
                                foreach($dom->getElementsByTagName('img') as $img) {
                                    //if $img is the same image as (or a variation of) the one we are currently looping through ($fullFilename), then rename it
                                    if(pathinfo($fullFilename, PATHINFO_BASENAME) == pathinfo($img->getAttribute('src'), PATHINFO_BASENAME) || $this->isImgVarOf(pathinfo($fullFilename, PATHINFO_BASENAME), pathinfo($img->getAttribute('src'), PATHINFO_BASENAME))){
                                        $img->setAttribute('src', $editedPage->filesManager()->url() . pathinfo($newFilename, PATHINFO_FILENAME) . str_replace(pathinfo($fullFilename, PATHINFO_FILENAME), '', pathinfo($img->getAttribute('src'), PATHINFO_FILENAME)) . '.' . pathinfo($fullFilename, PATHINFO_EXTENSION));
                                    }
                                }
                                $editedPage->$taf = $dom->saveHTML();
                                $editedPage->save($taf);
                            }
                        }
                        $file->rename($newFilename);
                    }
                }
                break; // need to break out of $rules foreach once there has been a match and the file has been renamed.
            }

        }

    }

    /**
     * Generate the new filename based on the user set config options
     *
     */
    public function createNewFilename($filename, $newname, $filenameLength, $pageid, $fieldid){

        $path_parts = pathinfo($filename);

        //filename format can support $page, $template, $field, and $file variables in the format as defined in the module config settings
        $page = $this->pages->get($pageid);
        $field = $this->fields->get($fieldid);
        $template = $page->template;
        $file = $page->$field->get("name={$path_parts['basename']}");


        // Grab filename format and eval it. I am thinking about ditching the eval approach and going with a template style system
        // The two commented out options allow for full flexibility (the user can use php functions etc, but makes formatting more complicated)
        //$newname = $this->sanitizer->pageName(eval($newname), true);
        //$newname = $this->sanitizer->pageName(eval("return $newname;"), true);

        // put error_get_last in a defined state so we can know if the eval added the last error
        // http://ca3.php.net/manual/en/function.error-get-last.php#113518
        // var_dump or anything else, as this will never be called because of the 0
        set_error_handler('var_dump', 0);
        @$undef_var;
        restore_error_handler();

        $page->of(true); //turned this on for allowing datetime field outputformatting to come through in filenames, rather than unixtimestamps
        if(strpos($newname,'randstring') !== false){ // process the length from random string request
            preg_match("/\[(.*?)\]/", $newname, $length);
            $newname = str_replace('randstring['.$length[1].']', $this->generateRandomString($length[1]), $newname);
        }
        elseif(strpos($newname,'[') !== false){ //expecting a date format string for formatting the current datetime
            preg_match("/\[(.*?)\]/", $newname, $dateformat_array);
            $newname = str_replace($dateformat_array[0], date($dateformat_array[1]), $newname);
        }
        //@ for eval used to silence "Trying to get property of non-object" notice when using something like $file->description which isn't available at the point when the file is uploaded/installed
        $newname = @eval('return "'.$newname.'";');
        $page->of(false); //not sure if turning off is really necessarily, but seems safer

        $e = error_get_last();
        if ($e['message']!='Undefined variable: undef_var' || $newname == ''){
            if(strpos($path_parts['filename'],'.upload.tmp') === false) {
                $newname = $path_parts['filename'] . '.upload.tmp'; // this allows the filename to be renamed on page save if the field for the format wasn't available at upload
            }
            else{
                $newname = $path_parts['filename'];
            }
        }

        // truncate final new name before checking to see if "-n" needs to be appended
        if($filenameLength != '') $newname = $this->truncate($newname, $filenameLength);

        $n = 0;
        //if a number mask (### etc) is supplied in the filename format
        if(strpos($newname,'#') !== false){
            do {
                $n++;
                $custom_n = str_pad($n, substr_count($newname, '#')+1, '0', STR_PAD_LEFT);
                $finalFilename = $path_parts['dirname'] . '/' . $this->sanitizer->pageName(preg_replace("/\#+/", "$1".$custom_n, $newname), true) .  '.' . $path_parts['extension'];
            } while(file_exists($finalFilename));
        }
        else{
            do {
                $finalFilename = $path_parts['dirname'] . '/' . $this->sanitizer->pageName($newname, true) . ($n === 0 ? '' : '-' . $n) .  '.' . $path_parts['extension'];
                $n++;
            } while(file_exists($finalFilename));

        }

        return $finalFilename;

    }


    public function generateRandomString($length = 10) {
        $characters = '0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ';
        $randomString = '';
        for ($i = 0; $i < $length; $i++) {
            $randomString .= $characters[rand(0, strlen($characters) - 1)];
        }
        return $randomString;
    }


    public function isImgVarOf($origImage, $compareImage){
        $re =   '/^'  .
            pathinfo($origImage, PATHINFO_FILENAME) . '\.' .      // myfile.
            '(\d+)x(\d+)' .         // 50x50
            '([pd]\d+x\d+|[a-z]{1,2})?' .   // nw or p30x40 or d30x40
            '\.' . pathinfo($origImage, PATHINFO_EXTENSION) .       // .ext
            '$/';

        if(preg_match($re, $compareImage)) {
            return true;
        }
    }



    static public function getModuleConfigInputfields(array $data) {

            $data = array_merge(self::getDefaultData(), $data);

            // this is a container for fields, basically like a fieldset
            $fields = new InputfieldWrapper();

            // Populate the $fieldsModel with data for each field
            $fieldsModel = array(
                    'tempDisabled' => array(
                                    'label'=>"Temporarily Disabled",
                                    'desc'=>'Check to disable this rule without deleting it.',
                                    'type'=>"_createInputfieldCheckbox",
                                    'options' => "",
                                    'notes' => "",
                                    'fieldset'=>'renameRules',
                                    'fieldsetname'=>'Rename Rules',
                                    'fieldsetdescription'=>"&bull; Add as many different rules as you need.\n&bull; If a rule option is left blank, the rule with be applied to all fields/templates/pages/extensions.\n&bull; Leave Filename Format blank to prevent renaming for a specific field/template/page combo, overriding a more general rule.\n&bull; Rules are processed in order, so put more specific rules before more general ones. You can drag to change the order of rules as needed.\n&bull; The following variables can be used in the filename format: ".'$page, $template, $field, and $file. '."For some of these (eg. ".'$field'."->description), if they haven't been filled out and saved prior to uploading the image, renaming won't occur on upload, but will happen on page save - if you inserted it into an RTE/HTML field before page save, then the link will be automatically updated).\n\nSome example filename formats:\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&bull;&nbsp;".'$page->title'."\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&bull;&nbsp;".'mysite-{$template->name}-images'."\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&bull;&nbsp;".'$field->label'."\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&bull;&nbsp;".'$file->description'."\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&bull;&nbsp;".'{$page->name}-{$file->filesize}-kb'."\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&bull;&nbsp;".'prefix-[Y-m-d_H-i-s]-suffix (anything inside square brackets is is considered to be a PHP date format for the current date/time)'."\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&bull;&nbsp;".'randstring[n] (where n is the number of characters you want in the string)'."\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&bull;&nbsp;".'### (custom number mask, eg. 001 if more than one image with same name on a page. This is an enhanced version of the automatic addition of numbers if required)'."\n\n&bull; If 'Rename on Save' is checked files will be renamed again each time a page is saved (admin or front-end via API). WARNING: this setting will break any direct links to the old filename in your template files. However, images inserted into RTE/HTML fields on the same page will have their links automatically updated.",
                                    'width'=>19),
                    'enabledFields' => array(
                                    'label' => "Enabled Fields",
                                    'desc' => "Select none for all fields.",
                                    'type' => "_createInputfieldAsmSelect",
                                    'options' => "",
                                    'notes' => "",
                                    'fieldset'=>'renameRules',
                                    'width' => 27),
                    'enabledTemplates' => array(
                                    'label'=>"Enabled Templates",
                                    'desc'=>"Select none for all templates.",
                                    'type'=>"_createInputfieldAsmSelect",
                                    'options' => "",
                                    'notes' => "",
                                    'fieldset'=>'renameRules',
                                    'width'=>27),
                    'enabledPages' => array(
                                    'label'=>"Enabled Pages",
                                    'desc'=>"AND THEIR CHILDREN Select none for all pages.",
                                    'type'=>"_createInputfieldPageListSelectMultiple",
                                    'options' => "",
                                    'notes' => "",
                                    'fieldset'=>'renameRules',
                                    'width'=>27),
                    'fileExtensions' => array(
                                    'label'=>"File Extensions",
                                    'desc'=>"Comma separated (eg. png, jpg). Leave empty for all extensions.",
                                    'type'=>"_createInputfieldText",
                                    'options' => "",
                                    'notes' => "",
                                    'fieldset'=>'renameRules',
                                    'width'=>25),
                    'filenameFormat' => array(
                                    'label'=>"Filename Format",
                                    'desc'=>'eg: mysite-{$page->path} Leave empty to not rename.',
                                    'type'=>"_createInputfieldText",
                                    'options' => "",
                                    'notes' => "",
                                    'fieldset'=>'renameRules',
                                    'width'=>25),
                    'filenameLength' => array(
                                    'label'=>"Filename Length",
                                    'desc'=>'Number of characters (nearest whole word). Leave empty for no truncation.',
                                    'type'=>"_createInputfieldText",
                                    'options' => "",
                                    'notes' => "",
                                    'fieldset'=>'renameRules',
                                    'width'=>25),
                    'renameOnSave' => array(
                                    'label'=>"Rename on Save",
                                    'desc'=>'Rename again on page save. See warning above.',
                                    'type'=>"_createInputfieldCheckbox",
                                    'options' => "",
                                    'notes' => "",
                                    'fieldset'=>'renameRules',
                                    'width'=>25),
                    'ruleData' => array(
                                    'label'=>"Rule Data",
                                    'desc'=>"JSON string of the rule data",
                                    'type'=>"_createInputfieldHidden",
                                    'options' => "",
                                    'notes' => "")
            );
            // Now use $data and $fieldsModel loop to create all fields
            $fieldset = '';

            foreach ($fieldsModel as $f=>$fM){
                    $fM['width'] = isset($fM['width']) ? $fM['width'] : 100;
                    if (isset($fM['fieldset'])) {
                            if ($fM['fieldset'] != $fieldset) {
                                    $fieldset = $fM['fieldset'];
                                    ${$fM['fieldset']} = wire('modules')->get("InputfieldFieldset");
                                    ${$fM['fieldset']}->label = $fM['fieldsetname'];
                                    ${$fM['fieldset']}->description = $fM['fieldsetdescription'];
                                    ${$fM['fieldset']}->id = str_replace(' ', '', $fM['fieldsetname']);
                                    ${$fM['fieldset']}->set('collapsed', Inputfield::collapsedNo);
                            }
                            // For Jquery to work we want all rename rules fields in a wrapper of their own, so skip adding the field here
                            if ($fM['fieldset'] != 'renameRules') {
                                    ${$fM['fieldset']}->add(
                                            self::$fM['type']($f, $fM['label'], $data[$f], $fM['desc'], $fM['options'], $fM['notes'], $fM['width'])
                                    );
                            }
                            $fields->add(${$fM['fieldset']});
                    } else {
                            $fields->add(
                                    self::$fM['type']($f, $fM['label'], $data[$f], $fM['desc'], $fM['options'], $fM['notes'], $fM['width'])
                            );
                    }
            }

            $data['renameRules'] = !empty($data['ruleData']) ? json_decode($data['ruleData'], true) : array(0 => array('tempDisabled' => '','enabledFields' => '', 'enabledTemplates' => '', 'enabledPages' => '', 'fileExtensions' => '', 'filenameFormat' => '', 'filenameLength' => '', 'renameOnSave' => ''));
            // If we have more rules stored then load extra rows
            if (!empty($data['renameRules'])) {
                    foreach ($data['renameRules'] as $k => $rule) {
                            $rulewrapper = new InputfieldWrapper();
                            $rulewrapper->add(self::_createInputfieldCheckbox('tempDisabled', 'Temporarily Disabled', $rule['tempDisabled'], $fieldsModel['tempDisabled']['desc'], '', '', 19));
                            $rulewrapper->add(self::_createInputfieldAsmSelect('enabledFields', 'Enabled Fields', $rule['enabledFields'], $fieldsModel['enabledFields']['desc'], '', '', 27, $k));
                            $rulewrapper->add(self::_createInputfieldAsmSelect('enabledTemplates', 'Enabled Templates', $rule['enabledTemplates'], $fieldsModel['enabledTemplates']['desc'], '', '', 27, $k));
                            $rulewrapper->add(self::_createInputfieldPageListSelectMultiple('enabledPages', 'Enabled Pages', $rule['enabledPages'], $fieldsModel['enabledPages']['desc'], '', '', 27, $k));
                            $rulewrapper->add(self::_createInputfieldText('fileExtensions', 'File Extensions', $rule['fileExtensions'], $fieldsModel['fileExtensions']['desc'], '', '', 25));
                            $rulewrapper->add(self::_createInputfieldText('filenameFormat', 'Filename Format', $rule['filenameFormat'], $fieldsModel['filenameFormat']['desc'], '', '', 25));
                            $rulewrapper->add(self::_createInputfieldText('filenameLength', 'Filename Length', $rule['filenameLength'], $fieldsModel['filenameLength']['desc'], '', '', 25));
                            $rulewrapper->add(self::_createInputfieldCheckbox('renameOnSave', 'Rename on Save', $rule['renameOnSave'], $fieldsModel['renameOnSave']['desc'], '', '', 25));

                            $renameRules->add($rulewrapper);
                    }
            } else {

            }
            return $fields;
    }


    public function addScript($event){
        $conf = $this->getModuleInfo();
        $version = (int) $conf['version'];
         wire("config")->scripts->add($this->config->urls->ProcessCustomUploadNames . "ProcessCustomUploadNames.js?v={$version}");
    }

    public function addRule($id) {
            $fields = new InputfieldWrapper();
            $fields->add($this->_createInputfieldCheckbox('tempDisabled', 'Temporarily Disabled', '', 'Check to disable this rule without deleting it.', '', '', 19));
            $fields->add($this->_createInputfieldAsmSelect('enabledFields', 'Enabled Fields', '', 'Select none for all fields.', '', '', 27, $id));
            $fields->add($this->_createInputfieldAsmSelect('enabledTemplates', 'Enabled Templates', '', 'Select none for all templates.', '', '', 27, $id));
            $fields->add($this->_createInputfieldPageListSelectMultiple('enabledPages', 'Enabled Pages', '', 'AND THEIR CHILDREN Select none for all pages.', '', '', 27, $id));
            $fields->add($this->_createInputfieldText('fileExtensions', 'File Extensions', '', 'Comma separated list (eg. png, jpg). Leave empty for all extensions.', '', '', 25));
            $fields->add($this->_createInputfieldText('filenameFormat', 'Filename Format', '', 'eg: mysite-{$page->path} Leave empty to not rename.', '', '', 25));
            $fields->add($this->_createInputfieldText('filenameLength', 'Filename Length', '', 'Number of characters (nearest whole word). Leave empty for no truncation.', '', '', 25));
            $fields->add($this->_createInputfieldCheckbox('renameOnSave', 'Rename on Save', '', 'Rename again on page save. See warning above.', '', '', 25));
            echo $fields->render();
            exit;
    }

    private static function _createInputfieldText($ipName, $ipTitle, $ipValue='', $ipDesc='', $ipOptions='', $ipNotes='', $ipWidth, $ipRequired=false){
            $field =  wire('modules')->get("InputfieldText");
            $field->name = $ipName;
            $field->label = $ipTitle;
            $field->required = $ipRequired;
            $field->description = $ipDesc;
            $field->attr('value', $ipValue);
            $field->attr('notes', $ipNotes);
            $field->columnWidth = $ipWidth;
            return $field;
    }

    private static function _createInputfieldCheckbox($ipName, $ipTitle, $ipValue='', $ipDesc='', $ipOptions='', $ipNotes='', $ipWidth, $ipRequired=false){
            $field = wire('modules')->get("InputfieldCheckbox");
            $field->name = $ipName;
            $field->label = $ipTitle;
            $field->label2 = ' '; // this sets the displayed label to nothing - needs the space or it reverts to displaying ->label
            $field->required = $ipRequired;
            $field->description = $ipDesc;
            $field->attr('checked', $ipValue == '1' ? 'checked' : '' );
            $field->value = $ipValue;
            $field->attr('notes', $ipNotes);
            $field->columnWidth = $ipWidth;
            return $field;
    }

    private static function _createInputfieldAsmSelect($aName, $aTitle, $aValue, $aDesc='', $aOptions='', $aNotes='', $aWidth=100, $aID=1) {
            $field = wire('modules')->get("InputfieldAsmSelect");
            $field->name = $aName;
            $field->label = $aTitle;
            $field->description = $aDesc;
            if($aName == 'enabledFields'){
                foreach(wire('fields') as $currfield) {
                    if($currfield->flags & Field::flagSystem) continue;
                    if($currfield->type instanceof FieldtypeFile) $field->addOption($currfield->id, $currfield->name);
                }
            }
            if($aName == 'enabledTemplates'){
                foreach(wire('templates') as $currtemplate) {
                    if($currtemplate->flags & Template::flagSystem) continue;
                    $field->addOption($currtemplate->id, $currtemplate->name);
                }
            }
            $field->attr('value', $aValue);
            $field->columnWidth = $aWidth;
            $field->setAsmSelectOption('sortable', false);
            return $field;
    }


    private static function _createInputfieldPageListSelectMultiple($ipName, $ipTitle, $ipValue='', $ipDesc='', $ipOptions='', $ipNotes='', $ipWidth=100, $ipID=1){
            $field =  wire('modules')->get("InputfieldPageListSelectMultiple");
            $field->name = $ipName;
            $field->label = $ipTitle;
            $field->description = $ipDesc;
            $field->attr('value', $ipValue);
            $field->attr('id', $ipName . $ipID); // Allows us to add more of these with different IDs via AJAX
            $field->set('unselectLabel', 'Unselect');
            $field->columnWidth = $ipWidth;
            //$field->sortable = false; // this doesn't work - is there an alternative of setAsmSelectOption('sortable', false); that works for PageListSelectMultiple fields ?
            if($ipValue == 0) $field->collapsed = Inputfield::collapsedNo;
            return $field;
    }

    private static function _createInputfieldHidden($tName, $tTitle, $tValue, $tDesc='', $ipOptions=''){
            $field = wire('modules')->get("InputfieldHidden");
            $field->name = $tName;
            $field->label = $tTitle;
            $field->description = $tDesc;
            $field->attr('value', $tValue);
            return $field;
    }

    public function truncate($text, $length){
        if(strlen($text) > $length){
            return substr( $text, 0, strrpos( substr( $text, 0, $length), '-' ) );
        }
        else{
            return $text;
        }
    }

    public function ___install() {
            $data = array();
            $module = 'ProcessCustomUploadNames';
            wire('modules')->saveModuleConfigData($module, $data);
    }

}
